import 'package:flutter/material.dart';import 'package:http/http.dart' as http;import 'dart:convert';import 'package:flutter_application_1/pages/resume_editor_page.dart';import 'package:flutter_application_1/services/auth_service.dart';import 'package:flutter_application_1/pages/register_page.dart';class MyApp extends StatelessWidget {  const MyApp({super.key});  @override  Widget build(BuildContext context) {    return MaterialApp(      title: 'Resume App',      theme: ThemeData(
        primarySwatch: Colors.brown,
        scaffoldBackgroundColor: Colors.blue.shade50,
        appBarTheme: const AppBarTheme(
          backgroundColor: Colors.brown,
          foregroundColor: Colors.white,
        ),
        elevatedButtonTheme: ElevatedButtonThemeData(
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.brown,
            foregroundColor: Colors.white,
          ),
        ),
        useMaterial3: true,
      ),      home: const LoginPage(),    );  }}class LoginPage extends StatefulWidget {  const LoginPage({super.key});  @override  State<LoginPage> createState() => _LoginPageState();}class _LoginPageState extends State<LoginPage> {  final TextEditingController _loginController = TextEditingController();  final TextEditingController _passwordController = TextEditingController();  String _errorMessage = '';  bool _isLoading = false;  final AuthService _authService = AuthService();  Future<void> _login() async {    if (_loginController.text == 'DEMO' &&        _passwordController.text == 'DEMO') {      if (mounted) {        await _authService.saveUserData(          'mock_token',          '0',          'Demo',          'User',        );        Navigator.pushReplacement(          context,          MaterialPageRoute(            builder: (context) => const HomePage(              userId: 0,              firstName: 'Demo',              lastName: 'User',            ),          ),        );      }      return;    }    setState(() {      _isLoading = true;      _errorMessage = '';    });    try {      final response = await http.post(        Uri.parse('http://localhost:5000/api/login'),        headers: {'Content-Type': 'application/json'},        body: jsonEncode({          'login': _loginController.text,          'password': _passwordController.text,        }),      );      if (response.statusCode == 200) {        final data = jsonDecode(response.body);        if (data['error'] == null || data['error'].isEmpty) {          await _authService.saveUserData(            data['token'],            data['id'],            data['firstName'],            data['lastName'],          );          if (mounted) {            Navigator.pushReplacement(              context,              MaterialPageRoute(                builder: (context) => HomePage(                  userId: int.parse(data['id']),                  firstName: data['firstName'],                  lastName: data['lastName'],                ),              ),            );          }        } else {          setState(() {            _errorMessage = data['error'];          });        }      } else {        setState(() {          _errorMessage = 'Login failed. Please try again.';        });      }    } catch (e) {      setState(() {        _errorMessage = 'Network error. Please check your connection.';      });    } finally {      setState(() {        _isLoading = false;      });    }  }  @override  Widget build(BuildContext context) {    return Scaffold(      body: Center(        child: Padding(          padding: const EdgeInsets.all(32.0),          child: Column(            mainAxisAlignment: MainAxisAlignment.center,            crossAxisAlignment: CrossAxisAlignment.stretch,            children: [              const Text(                'Login',                style: TextStyle(fontSize: 32, fontWeight: FontWeight.bold),                textAlign: TextAlign.center,              ),              const SizedBox(height: 40),              TextField(                controller: _loginController,                decoration: const InputDecoration(                  labelText: 'Login Name',                  border: OutlineInputBorder(),                ),              ),              const SizedBox(height: 16),              TextField(                controller: _passwordController,                obscureText: true,                decoration: const InputDecoration(                  labelText: 'Password',                  border: OutlineInputBorder(),                ),              ),              const SizedBox(height: 24),              ElevatedButton(                onPressed: _isLoading ? null : _login,                style: ElevatedButton.styleFrom(                  padding: const EdgeInsets.symmetric(vertical: 16),                ),                child: _isLoading                    ? const CircularProgressIndicator()                    : const Text('Login', style: TextStyle(fontSize: 16)),              ),              const SizedBox(height: 16),              TextButton(                onPressed: () {                  Navigator.push(                    context,                    MaterialPageRoute(                      builder: (context) => const RegisterPage(),                    ),                  );                },                child: const Text('Don\'t have an account? Register here.'),              ),              if (_errorMessage.isNotEmpty)                Text(                  _errorMessage,                  style: const TextStyle(color: Colors.red, fontSize: 14),                  textAlign: TextAlign.center,                ),            ],          ),        ),      ),    );  }  @override  void dispose() {    _loginController.dispose();    _passwordController.dispose();    super.dispose();  }}class HomePage extends StatefulWidget {  final int userId;  final String firstName;  final String lastName;  const HomePage({    super.key,    required this.userId,    required this.firstName,    required this.lastName,  });  @override  State<HomePage> createState() => _HomePageState();}class _HomePageState extends State<HomePage> {  final AuthService _authService = AuthService();  String _displayFirstName = '';  String _displayLastName = '';  int _displayUserId = 0;  @override  void initState() {    super.initState();    _loadUserData();  }  Future<void> _loadUserData() async {    final firstName = await _authService.getFirstName();    final lastName = await _authService.getLastName();    final userId = await _authService.getUserId();    setState(() {      _displayFirstName = firstName ?? widget.firstName;      _displayLastName = lastName ?? widget.lastName;      _displayUserId = int.parse(userId ?? widget.userId.toString());    });  }  Future<void> _logout() async {    await _authService.deleteUserData();    if (mounted) {      Navigator.pushAndRemoveUntil(        context,        MaterialPageRoute(builder: (context) => const LoginPage()),        (Route<dynamic> route) => false,      );    }  }  @override  Widget build(BuildContext context) {    return Scaffold(      appBar: AppBar(        title: Text('Welcome, $_displayFirstName $_displayLastName'),        automaticallyImplyLeading: false,        actions: [          IconButton(            icon: const Icon(Icons.logout),            onPressed: _logout,          ),        ],      ),      body: Padding(        padding: const EdgeInsets.all(16.0),        child: Column(          crossAxisAlignment: CrossAxisAlignment.stretch,          children: [            ElevatedButton(              onPressed: () {                Navigator.push(                  context,                  MaterialPageRoute(                    builder: (context) => ResumeEditorPage(userId: _displayUserId),                  ),                );              },              child: const Text('Edit Resume'),            ),          ],        ),      ),    );  }}